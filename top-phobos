#!/usr/bin/env perl

use strict;
use warnings;
our $VERSION = '0.03';

use List::Util qw/ shuffle /;
use File::Slurp;
use YAML::Syck;

# config
my $file_ping = 'top-phobos.ping';
my $file_host = 'top-phobos.host';
my @servers = map { sprintf "a%s.phobos.apple.com", $_ } (1..2000);


# ping results from previous run
my $ping = -f $file_ping ? LoadFile( $file_ping ) : {};

local $SIG{'INT'} = sub { save_host(); exit; };

# ping the rest servers, save it immediately
for my $server ( shuffle @servers ){

    # skip
    next if exists $ping->{$server};

    # check out
    my ( $time, $addr ) = ping_server( $server );
    my ( $min_time, $min_addr, $min_server ) = find_min();
    printf "  %dms  %s  %s;", $min_time, $min_addr, $min_server; 
    printf "  checked %s (%dms)\n", $server, $time;
    DumpFile( $file_ping, $ping );
}

save_host();
exit;

sub ping_server {
    my $server = shift;

    # PING a196.da1.akamai.net (63.80.4.51): 56 data bytes
    # 64 bytes from 63.80.4.51: icmp_seq=0 ttl=56 time=241.853 ms
    # 64 bytes from 63.80.4.51: icmp_seq=1 ttl=56 time=276.078 ms
    # 64 bytes from 63.80.4.51: icmp_seq=2 ttl=56 time=297.841 ms
    # 64 bytes from 63.80.4.51: icmp_seq=3 ttl=56 time=395.496 ms
    # 
    # --- a196.da1.akamai.net ping statistics ---
    # 4 packets transmitted, 4 packets received, 0.0% packet loss
    # round-trip min/avg/max/stddev = 241.853/302.817/395.496/57.109 ms

    my $report = `ping -c4 $server`;

    my ( $addr ) = ( $report =~ m{PING.*?\((.*?)\)} );
    my ( $time ) = ( $report =~ m{round-trip min/avg/max/stddev = .*?/(.*?)/.*?ms} );
    $time = 999999 unless $report =~ /\b0\.0% packet loss/;

    $ping->{$server}{'server'} = $server;
    $ping->{$server}{'addr'} = $addr;
    $ping->{$server}{'time'} = $time;

    return ( $time, $addr );
}

sub find_min {
    my @time_sorted = sort { $ping->{$a}{'time'} <=> $ping->{$b}{'time'} } keys %$ping;
    my $server = shift @time_sorted;
    return map { $ping->{$server}{$_} } qw / time addr server /;
}

sub save_host {
    my ( $min_time, $min_addr, $min_server ) = find_min();
    my @lines = map { sprintf "%s  %s\n", $min_addr, $_ } @servers;
    write_file( $file_host, \@lines );
    printf "Updated %s, using %s (%dms).\n", $file_host, $min_server, $min_time;
}
