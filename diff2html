#!/usr/bin/env perl
use strict;
use warnings;
our $VERSION = '0.02';

use Text::Diff::Parser;
use Algorithm::Diff;
use List::MoreUtils qw/ pairwise /;
no warnings qw/ once /;


#-------------------------------
# read diff from stdin
my @lines = <>;
my $diff = join '', @lines;


#-------------------------------
# parse the changes
my $parser = Text::Diff::Parser->new;
$parser->parse( $diff );
my @changes = $parser->changes;
exit unless @changes;


#-------------------------------
# print the html header
print qq{
<!DOCTYPE html>
<html>
<head>
<meta charset='utf-8'>
<style>
div.container { width: 90%; margin: 0 auto; }
div.filename { font-family: arial; margin: 2em 0 0.5em; }
table.diff { border-top: solid 1px #ddd; border-left: solid 1px #ddd; border-bottom: solid 1px #ddd; }
table.diff td { 
    border-right: solid 1px #DDDDDD;
    background: #F8F8FF;
    font: 0.8em 'Bitstream Vera Sans Mono','Courier',monospace; 
    line-height: 1.4em;
}
table.diff td.line { background: #ECECEC; color: #AAAAAA; text-align: right; vertical-align: top; padding: 0 0.3em; }
table.diff td.head { background: #EAF2F5; color: #999999; }
table.diff td pre { margin: 0; font-size: 1.3em; padding: 0 0.3em; }
table.diff td.remove { background: #FFDDDD; color: #000000; }
table.diff td.add { background: #DDFFDD; color: #000000; }
table.diff td span.ins { background: #AAFFAA; color: #000000; }
table.diff td span.del { background: #FFAAAA; color: #000000; }
pre {
    white-space: pre-wrap;       / css-3 /
    white-space: -moz-pre-wrap;  / Mozilla, since 1999 /
    white-space: -pre-wrap;      / Opera 4-6 /
    white-space: -o-pre-wrap;    / Opera 7 /
    word-wrap: break-word;       / Internet Explorer 5.5+ /
} 
</style>
</head>
<body>
<div class="container">
};


#-------------------------------
# one diff output may contains many file's changes
# find them and dump the diff one by one
my $files;
map { 
    my $filename = $_->filename1;
    $filename =~ s/^a\///;
    push @{$files->{$filename}}, $_; 
} @changes;
my @filenames = sort keys %$files;


#-------------------------------
# first, the file list
printf qq{<ul class="filenames">\n};
for my $filename ( @filenames ){
    printf qq{<li><a href="#%s">%s</a></li>\n}, $filename, $filename;
}
printf qq{</ul>\n};


#-------------------------------
# next, the diff table for each file
for my $filename ( @filenames ){

    #-------------------------------
    # the filename
    printf qq{<div class="filename"><a name="%s"></a>%s</div>\n}, $filename, $filename;

    #-------------------------------
    # the table
    print qq{<table class="diff" cellpadding="0" cellspacing="0" border="0">};

    #-------------------------------
    # collect the rows first, then do words diff, and print the html rows
    my @rows;
    my $last_function;
    my @last_removed = ();
    my @last_added = ();
    my @rows_diff;
    for my $change ( @{$files->{$filename}} ){

        #--------------------
        # push head into rows
        my $head = sprintf qq{
            <tr><td class="line">...</td><td class="line">...</td>
            <td class="head"><pre>@@ -%d,%d +%d,%d @@ %s</pre></td></tr>
        }, map { escape( $change->{$_} ) } qw/ line1 size1 line2 size2 function /;
        # just once
        unless ( defined $last_function and $last_function eq $change->{'function'} ){
            push @rows, { head => $head }; 
            $last_function = $change->{'function'};
        }

        #--------------------
        # push lines into rows
        for my $offset ( 0 .. $change->size - 1 ) {

            my $line1 = $change->line1 + $offset;
            my $line2 = $change->line2 + $offset;
            my $text = $change->text( $offset );
            my $class = lc $change->type || 'same';

            my $row = { line1 => $line1, line2 => $line2, class => $class, text => $text };
            push @rows, $row;

            #--------------------------
            # push the removed / added lines into groups,
            # so that we can diff them line by line, words by words later
            # not support the 'modify' change type yet.
            push @last_removed, $row if $class eq 'remove';
            push @last_added, $row if $class eq 'add';
            if ( $class eq 'same' ){
                if ( @last_removed or @last_added ){
                    push @rows_diff, [ [@last_removed], [@last_added] ];
                    @last_removed = ();
                    @last_added = ();
                }
            }
        }
    }

    #--------------------
    # find the words diff 
    for ( @rows_diff ){

        # every change block may has different line numbers
        # pairwise one by one
        my ( $removed_lines, $added_lines ) = @$_;
        my @lines = pairwise { [ $a, $b ] } @$removed_lines, @$added_lines;

        # pick the same offset line, and split as words, do the diff, join as html 
        for ( @lines ){
            my ( $removed_line, $added_line ) = @$_;

            # the updated regex borrowed from:
            # http://cpansearch.perl.org/src/MRAMBERG/MojoMojo-1.04/lib/MojoMojo/WordDiff.pm
            my @args = map {
                my @words = [];
                if ( defined $_ ){
                    @words = split qr/(?:(?<!\p{IsWord})(?=\p{IsWord}))/msx, $_->{'text'};
                }
                \@words;
            } @$_;
        
            # diff
            my $diff = Algorithm::Diff->new( @args );
            my $remove = ''; my $add = '';
            while ( $diff->Next ) {
                if ( my @same = $diff->Same ) {
                    my $same = escape( join '', @same );
                    $remove .= $same; 
                    $add .= $same;

                } else {
                    if ( my @del = $diff->Items(1) ) {
                        $remove .= '<span class="del">' . escape( join '', @del ) . '</span>';
                    }
                    if ( my @ins = $diff->Items(2) ) {
                        $add .= '<span class="ins">' . escape( join '', @ins ) . '</span>';
                    }
                }
            }

            # attach the html version into the row node
            $removed_line->{'html'} = $remove if defined $removed_line;
            $added_line->{'html'} = $add if defined $added_line;
        }
    }

    #-------------------------------
    # well, print the rows
    for my $row ( @rows ){

        if ( exists $row->{'head'} ){
            print $row->{'head'};
        
        }else{
            my $class = $row->{'class'};
            my $line1 = $row->{'line1'};
            my $line2 = $row->{'line2'};

            my $html;
            if ( $class eq 'remove' ){
                $line2 = '';
                $html = sprintf "-%s", $row->{'html'};
            }elsif( $class eq 'add' ){
                $line1 = '';
                $html = sprintf "+%s", $row->{'html'};
            }elsif( $class eq 'same' ){
                $html = sprintf " %s", escape( $row->{'text'} );
            }

            printf qq{<tr><td class="line">%s</td><td class="line">%s</td>\n}, $line1, $line2;
            printf qq{<td class="changes %s"><pre>%s</pre></td></tr>\n}, $class, $html;
        }
    }
    # close the table
    print qq{</table>\n};
}

#-------------------------------
# html footer
print qq{</div></body></html>};
exit(0);



#-------------------------------
# just escape the html entities
sub escape {
    my $text = shift;
    for ($text) {
        s/&/&amp;/g;
        s/</&lt;/g;
        s/>/&gt;/g;
        s/"/&quot;/g;
    }
    $text;
}


