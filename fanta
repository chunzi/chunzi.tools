#!/usr/bin/env perl
use strict;
use warnings;

use File::Copy;
use Path::Class;
use Class::Date qw/ now /;
use utf8;

my $done = sprintf "done-%s", now->strftime('%m%d');
my $trash = sprintf "trashed";

my $dir_done  = dir($done);
my $dir_trash = dir($trash);

-d $dir_done or $dir_done->mkpath( 0, 0777 );
-d $dir_trash or $dir_trash->mkpath( 0, 0777 );

my $found   = [];
my $removed = [];
my $uniq    = {};
my $pwd     = dir('.');

find_big($pwd);

for (@$found) {
    my $name = name_for( $_->basename );
    if ( exists $uniq->{$name} ) {
        my ( $base, $ext ) = $name =~ /(.*?)\.(.*?)$/;
        my $rand = int rand(100000);
        $base = join '-RND', $base, $rand;
        $name = join '.',    $base, $ext;
    }
    $uniq->{$name}++;
    my $target = $dir_done->file($name);
    printf "%s => %s\n", $_, $target;
    rename "$_", $target;
}

for (@$removed) {
    printf "trashed %s\n", $_;
    rename "$_", $dir_trash->subdir("$_");
}

sub find_big {
    my $pwd = shift;
    my $deep = shift || 0;
    $deep++;
    for ( $pwd->children ) {
        if ( -f and -s > 100 * 1024 * 1024 ) {
            push @$found, $_;
        }
        elsif (-d) {
            if ( $deep == 1 ) {
                next if $_->basename =~ /^(done|trashed)/;
                push @$removed, $_;
            }
            find_big( $_, $deep );
        }
    }
}

sub name_for {
    my $name = lc shift;
    my ($ext) = $name =~ /\.([^.]*?)$/;
    $name =~ s/\.$ext$//;
    $name =~ s/\b/\-/g;
    $name =~ s/[^a-z0-9_-]//g;
    $name =~ s/[_-]+/\-/g;
    $name =~ s/^-|-$//g;
    $name = join '.', uc $name, lc $ext;
    return $name;
}

