#!/usr/bin/env perl
use strict;
use warnings;
our $VERSION = '0.01';

use File::Copy;
use File::HomeDir;
use File::Slurp;
use Getopt::Long::Descriptive;
use MP3::Tag;
use Path::Class;
use Term::ANSIColor qw/ :constants /;

local $Term::ANSIColor::AUTORESET = 1;

my $itunes = dir( File::HomeDir->my_home, 'Music', 'iTunes', 'iTunes Media', 'Music');
die "iTuens dir not found: $itunes\n" unless -d $itunes;

my $default_to = dir "/Volumes/500GB/Cloud/Music";

#-----------------------
# options / usages
my ( $opt, $usage ) = describe_options(
    '%c %o',
    [ 'to=s',  "the music album dir, default is $default_to" ],
    [ 'help',  "print usage message and exit" ],
);
if ( $opt->help ){ print $usage->text; exit; }


#-----------------------
# resources
my $to = dir( $opt->to || $default_to );
die "Album dir not found: $to\n" unless -d $to;

#-----------------------
# read the dir/files from itunes' music directory
# move them into target dir
my @artists = grep { -d } $itunes->children;
for my $artist ( @artists ){
    my @albums = grep { -d } $artist->children;

    for my $album ( @albums ){
        my $name = join(' - ', $album->dir_list(-2,2));
        my @files = grep { /\.mp3$/i } grep { -f } $album->children;
        print STDERR MAGENTA "==> "; 

        # skip non-mp3 album
        unless ( @files ){
            print STDERR RED "Skipped $name";
            print STDERR "\n";
            next;
        } 

        # dump cover.jpg from the first mp3 file
        my $mt = MP3::Tag->new($files[0]);
        my @tags = $mt->get_tags;
        my $id3v2 = $mt->{'ID3v2'};
        my $data = $id3v2->frame_select('APIC', '', '') or die "no expected APIC frame found";
        my $cover = $album->file('cover.jpg');
        write_file( $cover->stringify, { binmode => ':raw' }, $data );
        
        # target dir, not exist then creat, showing [A]dd
        my $dir = $to->subdir( $name );

        # duplicated albums in target dir
        # do nothing, just notify the user
        if ( -d $dir ){
            print STDERR RED "Duplicated $name";
            print STDERR "\n";

        }else{
            print STDERR GREEN "Added $name";
            print STDERR "\n";
            
            # build the target dir and move the files
            $dir->mkpath;
            map {
                my $basename = $_->basename;
                move("$_", "$dir/$basename");
            } ( @files, $cover );

            # remove the source
            $album->remove;
        }

    }

    $artist->remove;
}

exit(0);
